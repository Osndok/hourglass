/*
 * Hourglass - a time tracking utility.
 * Copyright (C) 2003 Michael K. Grant <mike@acm.jhu.edu>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * --------------------------------------------------------------------
 *
 * CVS Revision $Revision: 1.3 $
 * Last modified on $Date: 2003/11/08 20:52:19 $ by $Author: mgrant79 $
 *
 */
package net.sourceforge.hourglass.build;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Date;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Task;

/**
 * @author Mike Grant <mike@acm.jhu.edu>
 *
 */
public class GenerateStringsTask extends Task {

  private static final String COMMENT = "#";
  private static final String INDENT = "  ";
  
  private File _srcFile;
  private File _destFile;
  private String _packageName;
  private String _className;

  public void execute() throws BuildException {
    checkArguments();
    
    if (upToDate()) {
      return;
    }
    
    try {
      BufferedReader in =
        new BufferedReader(
          new InputStreamReader(new FileInputStream(_srcFile)));
          
      if (!_destFile.getParentFile().exists()) {
        if (!_destFile.getParentFile().mkdirs()) {
          throw new BuildException("Couldn't create directory " + 
                                   _destFile.getParent() );
        }
      }
          
      PrintWriter out = new PrintWriter(new FileOutputStream(_destFile));
      
      writeHeader(out);

      int num = 0;      
      String eachLine;
      while ((eachLine = in.readLine()) != null) {
        eachLine = trim(eachLine);
        if (!eachLine.equals("")) {
          writeLine(out, eachLine);
          ++num;
        }
      }
      
      writeFooter(out);
      
      log("Wrote " + num + " strings to " +  _destFile.getAbsolutePath());
      out.close();

    }
    catch (IOException ioex) {
      throw new BuildException(ioex.getMessage(), ioex);
    }
  }
  
  
  private void checkArguments() throws BuildException {
    if (_srcFile == null) {
      throw new BuildException("Argument 'srcfile' is required.");
    }
    if (_destFile == null) {
      throw new BuildException("Argument 'destfile' is required.");
    }
    if (_className == null) {
      throw new BuildException("Argument 'class' is required.");
    }
  }
  
  
  private String trim(String line) {
    String str = line.replaceAll(COMMENT + ".*$", "");
    return str.trim();
  }
  
  
  private void writeHeader(PrintWriter r) {
    if (_packageName != null) {
      r.println("package " + _packageName + ";");
      r.println();
    }
    r.println("/**");
    r.println("  * String resource names.");
    r.println("  *");
    r.println("  * Auto-generated by " + getClass().getName());
    r.println("  * Source File: " + _srcFile.getAbsolutePath());
    r.println("  * Date: " + new Date());
    r.println("  */");
    r.println("public class " + _className + " {");
  }
  
  
  private void writeFooter(PrintWriter r) {
    r.println("}");
  }
  
  
  private void writeLine(PrintWriter r, String varName) {
    r.println(INDENT + "public static final String " + varName + 
              " = \"" + varName + "\";");              
  }
  
  
  private boolean upToDate() {
    return _destFile.lastModified() >= _srcFile.lastModified();
  }
  
  
  public void setSrcfile(File f) {
    _srcFile = f;
  }

  public void setDestfile(File f) {
    _destFile = f;
  }
  
  public void setPackage(String packageName) {
    _packageName = packageName;
  }
  
  public void setClass(String className) {
    _className = className;
  }

}
